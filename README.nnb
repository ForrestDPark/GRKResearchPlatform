{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# 설치 및 기본 세팅 플로우 \n```Bash\n## 디렉토리 생성 \ncd GRKResearchPlatform\ncd grk \n\n\nvi tsconfig.json\n################################\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ESNEXT\",\n        \"experimentalDecorators\":true,\n        \"emitDecoratorMetadata\":true\n    }\n}\n################################\ncd grk\n## npm 인스톨 \nnpm install\n\n## NestJS + typescript  setting\nnpm install  -g @nestjs/cli\nnpm i @nestjs/core @nestjs/common @nestjs/platform-express reflect-metadata typescript\nnpm i -g typescript ts-node\n\n## console beautify\nnpm install chalk\n\n## Mongo DB \nnpm install mongodb\nnpm install @nestjs/mongoose mongoose\n\n## Sqlite & typeORM\nnpm install sqlite3 typeorm @nestjs/typeorm\n\n## 핸들바 UI\nnpm i express-handlebars@6.0.3\n\n### Config 환경변수  패키지\nnpm i @nestjs/config\n\n## yaml 설치 \nnpm i js-yaml\nnpm i -D @types/js-yaml\n\n## 비밀번호 hash 암호화 패키지 \nnpm install class-validator class-transformer\nnpm install bcrypt\nnpm install -D @types/bcrypt \n\n## cookie parser 설치 \nnpm install cookie-parser\n\n## session and passport 설치 \nnpm i @nestjs/passport passport passport-local express-session\nnpm i -D @types/passport-local @types/express-session \n\n## google oauth \nnpm i passport-google-oauth20\nnpm i -D @types/passport-google-oauth20 \n\n\n## 서버 개발자 모드 실행 \nnpm run start:dev\n\n\n```\n### (1) envs folder (config.yml, dev.env,local.env, prod.env)생성 \n### 2) package.json > strat 수정\n```JSON\n    \"start\": \"NODE_ENV=local nest start\",\n    \"start:dev\": \"NODE_ENV=dev nest start --watch\",\n    \"start:debug\": \"nest start --debug --watch\",\n    \"start:prod\": \"NODE_ENV=prod&& node dist/main\",\n```\n### 3) src/configs/config.ts, common.ts, dev.ts, local.ts, prod.ts) 생성 \n\n### 4) app.controller.ts, app.module.ts 생성 \n\n### 5) configs 폴더 복사 dev.ts 정리 \n\n### 6) project, task, user 폴더 생성 각각 controller.model.repository,schema,service 생성 후 app.module 에서 필요한 import 설정 추가, provider 추가 \n\n### 7) TypeORM 추가 RDB 전환용 라이블러리)\n\n\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# chapter 10 로그인 회원가입 인증 1단계\n\n- Authentication인증) : 누구인지 확인 \n- Authorization(인가) : 인증된 사용자의 권한을 확인하는 절차\n- 쿠키, 세션을 사용한 인증 기능 구현 \n- NestJS 에서는 롤기반의 권한 관리 제공 \n- https://docs.nestjs.com/security/authorization \n\n>chapter 10 부터 grk platform 으로 개발을 하도록 하자. \n향후  ch 9, 8 을 review 하면서 다시 grk 만들것. \n\n- AuthModule, AuthController, AuthService 클래스로 구성 \n- UserService 에는 회원정보 추가,수정,삭제 등의 method 있음. \n  \n## 10.1.2 User module 생성\n\n```bash\n\nnest new grk\ncd grk \nnest g module user\nnest g controller user --no-spec \nnest g service user --no-spec\nnpm install sqlite3 typeorm @nestjs/typeorm\n\n# nest g module project\n\nnest g controller project --no-spec \nnest g service project --no-spec\n## 기존의 task,user,project 폴더 와 같이 파일 만든후 appmodule 에서 설정을 수정할것 \n\n\nnpm install @nestjs/mongoose mongoose\n\nnpm install class-validator class-transformer\n\n## 유저 인증 \nnpm install bcrypt\nnpm install -D\n\n```\n### 10.2.1 엔티티 생성\n```TS\nimport { Column, Entity, PrimaryGeneratedColumn} from 'typeorm'\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id? : number\n\n    @Column({ unique: true})\n    email : string \n\n    @Column()\n    password: string\n\n    @Column()\n    username: string\n\n    @Column()\n    role: string\n\n    @Column({ type: \"datetime\", default: () => \"CURRENT_TIMESTAMP\"})\n    createdDt: Date= new Date()\n}\n```\n# 🤔TypeORM 이란\n\nNode.js 환경에서 TypeScript 를 사용하여 데이터베이스와 상호작용하는데 사용되는 Object-Relational Mapping(ORM) 라이브러리임. \n객체와 관계형 데이터베이스의 테이블 사이의 불일치를 해결해 주는 역할을 함. \n개발자가 데이터 베이스의 복잡한 SQL 쿼리를 직접 작성하지 않고도 객체 지향적인 코드를 사용하여 데이터를 조작할수 있게 함. \n- MySQL, PostgreSQL, SQLite, Oracle 등을 지원함. \n- 데이터 테이블과 매핑 \n- @Entity(), @Column(), @PrimaryGeneratedColum() 등의 데코레이터를 사용하여 클래스 속성을 데이터베이스 테이블의 컬럼과 연결함. \n- sql 쿼리문을 직접 작성하지 않고도 객체를 통해 데이터베이스를 조작가능. \n- 데이터 저장: repository.save(entity)\n- 데이터 조회 : repository.find() , findOne() 사용 \n- 관계설정 가능 \n    @OneToOne(), @OneToMany(), @ManyToMany() 로 테이블 간 관계 정의 가능\n\n\n\n| 기능             | `TypeOrmModule.forRoot()`                                                                                                 | `TypeOrmModule.forFeature()`                                                                                              |\n| :--------------- | :------------------------------------------------------------------------------------------------------------------------ | :----------------------------------------------------------------------------------------------------------------------- |\n| **역할**         | 데이터베이스 연결 설정 및 전체 애플리케이션 설정 정의                                                                        | 특정 모듈에서 사용할 엔티티 등록 및 해당 모듈에서 `Repository` 사용                                                              |\n| **사용 위치**      | `AppModule` 또는 `CoreModule`과 같은 최상위 모듈에서 한 번만 사용                                                                 | `UserModule`, `ProductModule`과 같은 특정 기능 모듈에서 필요에 따라 사용                                                            |\n| **기능**          | 데이터베이스 연결, 엔티티 자동 로딩, 동기화, 마이그레이션, 커넥션 풀 관리, 전체 설정 공유                                                               | 엔티티 등록, 의존성 주입 지원, 모듈 스코프                                                                                 |\n| **영향 범위**    | 애플리케이션 전체                                                                                                          | 특정 모듈 내                                                                                                             |\n| **사용 빈도**     | 애플리케이션에서 한 번만 사용                                                                                                | 여러 모듈에서 필요에 따라 사용                                                                                              |\n\n### (2) 엔터티를 적용할 유저서비스 생성 (기능없음)\n\n```TS\n//src/user/user.service.ts\n//User dto import\nimport { UserDto } from './user.model'\n\n// mogodb 용 repository import \nimport { UserFileRepository, UserMongoRepository, UserRepository} from './user.repository'\n\n// 의존성 주입 기능 import\nimport { Injectable } from '@nestjs/common'\n\n/* RDB 설정 ,typeORM */\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { User } from './user.entity'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectRepository(User) private userRepository: Repository<User>\n    ) {}\n    \n```\n- repository 를 의존하지 않고 service 단에서 db 를 처리 한다. \n\n|메서드|설명|\n|--|--|\n|find|SQL 에서 select 와 같은 역할 <br> |\n|findOne|findOne(id?:string |\n|findAndCount|찾고 개수세기 |\n|create|생성|\n|update|수정|\n|save|없으면 생성 있으면 수정|\n|delete|엔터티 내 데이터 삭제|\n|remove|엔터티 삭제 |\n\n## 10.2.2 컨트롤러 \n\nservice 를 의존해서 요청을 처리함. \n```TS\n// src/blog.controller.ts\n/* 1.  데코레이터 함수 임포트 */\nimport {  Controller, Param,Body, Delete, Get, Post, Put} from '@nestjs/common'\n// 블로그 서비스 임포트 \nimport { UserService } from './user.service'\n\n// SQLite setting \nimport { User } from './user.entity'\n\n@Controller('user') \nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Post('/create') \n  createUser(@Body() user: User) {\n    return this.userService.createUser(user)\n  }\n  @Get('/getUser/:email')\n  async getUser(@Param('email') email: string) {\n    const user = await this.userService.getUser(email)\n    console.log(user)\n    return user \n  }\n  @Put('/update/:email')\n  updateUser(@Param('email') email:string, @Body() user: User) {\n    console.log(user)\n    return this.userService.updateUser(email,user)\n  }\n  @Delete('/delete/:email')\n  deleteUser(@Param('email') email:string) {\n    return this.userService.deleteUser(email)\n  }\n\n}\n\n```\n## 10.2.3 서비스 생성 \n### (1) 서비스는 컨트롤러와 리포지토리를 이어주는 역할, \n\n```TS\n//src/user/user.service.ts\n\n//User dto import\nimport { UserDto } from './user.model'\n\n// mogodb 용 repository import \nimport { UserFileRepository, UserMongoRepository, UserRepository} from './user.repository'\n\n// 의존성 주입 기능 import\nimport { Injectable } from '@nestjs/common'\n\n/* RDB 설정 ,typeORM */\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { User } from './user.entity'\nimport { ConfigService } from '@nestjs/config'\n\n// provider 선언! 컨트롤러에서 사용. \n@Injectable()\nexport class UserService {\n    constructor(\n\n        @InjectRepository(User) private userRepository: Repository<User>\n    ) {}\n    // user 생성 \n    createUser(user) : Promise<User> {\n        return this.userRepository.save(user)\n    }\n    // user 한명 정보 찾기 \n    async getUser(email: string) {\n        const result = await this.userRepository.findOne({\n            where: { email }\n        })\n        return result\n    }\n    // user update (_user 는 수정된 user 객체임 )\n    async updateUser(email, _user) {\n        const user : User = await this.getUser(email)\n        console.log(_user)\n        user.username = _user.username\n        user.password = _user.password\n        console.log(user)\n        this.userRepository.save(user)\n    }\n    // user 정보 삭제 \n    deleteUser(email : any) {\n        return this.userRepository.delete({ email })\n    }\n}\n```\n- 서비스에서 사용하는 리포지토리(Repository from typeORM) 은 어디에서 가져오는가? user.module 을 만들어서 가져와야함. \n\n### (2) user.module 에 typeOrmModule 을 import 해서 사용\n\n```TS\nimport { Module } from \"@nestjs/common\";\nimport { UserController } from \"./user.controller\";\nimport { UserService } from \"./user.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./user.entity\";\n\n@Module({\n    imports : [TypeOrmModule.forFeature([User])],\n    controllers : [UserController],\n    providers : [UserService]\n\n})\nexport class UserModule {}\n```\n- User 라는 entity 가 모듈에 임포트 되어서 TypeORM 모듈에 등록되었다. \n- 추가로 entity가 app.module 에서도 등록이 되어야만 typeorm 에서 해당 엔티티의 메타데이터를 읽을 수있음. => app.moudle entities 에 [User] 추가 .\n\n```TS\n// import { UserSchema, User } from './user/user.schema';\nimport { User } from './user/user.entity'; //typeORM 용 엔터티 \n\n//... (생략)\n\n    TypeOrmModule.forRoot({\n      type: 'sqlite',\n      database: 'user-auth.sqlite', //데이터 베이스 파일명 \n      entities : [User], // 엔티티 리스트 \n      synchronize: true, // 데이터 베이스에 스키마를 동기화 \n      logging : true // sql 실행 로그 확인 \n    }),\n```\n\n** UserModule 을 임포트 해주고 provider 에서 UserService 부분을 주석처리한다. 이게 안되면 계속 mongoose 와 sqlite 가 충돌 \n```TS\n   // UserModule 을 주입\n    UserModule\n\n  ],\n  controllers: [\n    TaskController,\n    ProjectController,\n    UserController,\n    ConfController],\n  providers: [\n    ProjectService, ProjectFileRepository, ProjectMongoRepository,\n    TaskService, TaskFileRepository, TaskMongoRepository,\n    //UserService,//UserFileRepository, UserMongoRepository\n  ],\n})\n```\n# test \n\n```Bash\n### USER create test\n curl -X POST \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\" :\"Forre\",\n     \"password\": \"grkcon2025!\",\n     \"email\":\"forre@grkcon.com\",\n     \"role\":\"admin\"\n     }' \\\n     http://localhost:3000/user/create\n### USER (Get User) test\ncurl -X GET http://localhost:3000/user/getUser/forre@grkcon.com\n\n### Update User \ncurl -X PUT \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\" :\"Forre\",\n     \"password\": \"grkcon2025!\",\n     \"role\":\"user\"\n     }' \\\n     http://localhost:3000/user/update/forre@grkcon.com\n\n### Delete User\ncurl -X DELETE http://localhost:3000/user/delete/forre@grkcon.com\n```\n- update 할 때 user.role <-> _user.role 이 안되어있어서 업데이트 되지 않아서 수정함\n\n# 10.3 파이프로 유효성 검증 \n사용자에게 받은 입력값이 유효한지 검증은 필수 \n사용자의 입력은 늘 예상을 벗어남. \nNestJS 에서는 파이프를 사용해 유효성 검증을함. \n다양한 파이프들이 있으며 직접 만들 수도 있음. \n가장 간단한 ValidationPipe => class-validator, class-transformer 설치 필요 \n\n클라이언트와 데이터를 주고 받을때는 DTO 를 사용해야하므로 UserDto 객체를 만들어 유효성 검증에 필요한 조건을 추가 \n\n- 유효성 검증으로 @UsePipes데코와 Joi 라이브러리를 사용하는 방법도 있지만 스키마를 만들어야하고 메서드마다 UsePipes를 일일히 붙여야함. \n\n\n## 10.3.1 전역 ValidationPipe 설정하기 \n\n```bash\nnpm install class-validator class-transformer\n```\n### (1) maiin.ts 에 ValidationPipe 설정 추가 \n\n```TS\n//main.ts\n// 회원 로그인시 유효성 검증을 위한 ValidationPipe 임포트 \nimport { ValidationPipe } from '@nestjs/common'\n  // 전역 파이프에 validationPipe 추가 \n  app.useGlobalPipes(new ValidationPipe())\n```\n\n## 10.3.2. UserDto 생성 \n\n### (1) user.dto.ts 작성 \n```TS\n//user.dto.ts\nimport { IsEmail, IsString } from \"class-validator\";\nexport class CreateDto {\n    @IsEmail()\n    email : string \n    @IsString()\n    password: string\n    @IsString()\n    username : string \n    @IsString() \n    role: string \n}\nexport class UpdateUserDto {\n    @IsString()\n    username: string\n    @IsString()\n    password: string \n}\n```\n### (2) Controller 에서 User 타입을 dto 로 변경 \n\n```TS\n\n// User DTO import \nimport { CreateUserDto, UpdateUserDto } from './user.dto'\n\n@Post('/create') \n  createUser(@Body() user: CreateUserDto) { ...\n\n@Put('/update/:email')\n  updateUser(@Param('email') email:string, @Body() user: UpdateUserDto) { ...\n```\n\n## 10.3.3 test \n\n```bash\n### USER create test wrong input error \ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\" :\"Forrea1\",\n    \"password\": \"grkcon2025!\",\n    \"email\":\"forres1temail.com\",\n    \"role\":\"admin\"\n    }' \\\n    http://localhost:3000/user/create\n```\n> {\"message\":[\"email must be an email\"],\"error\":\"Bad Request\",\"statusCode\":400}\n\n\n\n참고 1. [이메일 인증 참고 1](https://velog.io/@kwontae1313/NestJS-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0)\n\n[이메일 인증 참고2](https://suyeonme.tistory.com/108)\n\n[이메일 인증 참고 3](https://yoonchan1121.tistory.com/140)\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# [NestJS] 사용자 인증 모듈 생성 및 회원 가입하기  [2단계]\n>🌞 2025.1.23 \n\n- 인증 : 사용자의 자격을 확인\n- 사용자의 자격증명을 기존 정보를 기반으로 확인 후 인증 토큰을 발급함. \n- 사용자에게 부여된 인증 토큰은 특정 기간 동안만 유효 \n- 쿠키기반, 토큰기반(쿠키리스) 인증법이 있음. \n- 서버에서 보내준 쿠키를 클라이언트(주로브라우저) 에 저장해 관리함. \n- 토큰은 서버에 상태를 저장할 필요가 없음. \n- 쿠키와 토큰은 서로 장단점이 있음. \n- 토큰은 OAuth 를 사용한 소셜 로긴에서 사용할 예정, 먼저 쿠키 인증을 구현 \n\n## 10.4.1 인증 모듈 만들기 및 설정 \n### (1) 인증 모듈 생성\n> 📌 auth module > service > controller 순 생성 \n```bash\nnest g module auth --no-spec\nnest g service auth --no-spec\nnest g controller auth --no-spec\n```\n\n> 인증 시스템 논리 구조 \n<img src=\"https://blog.kakaocdn.net/dn/Q7zyv/btsLWLQR4ot/VCdZxsFHKyzJRO8T5GECvK/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/Q7zyv/btsLWLQR4ot/VCdZxsFHKyzJRO8T5GECvK/img.webp\" data-origin-width=\"1192\" data-origin-height=\"520\" data-is-animation=\"false\" width=\"750\" height=\"327\" data-mce-selected=\"1\">\n\n### (2) UserService 를 AuthService 에서 주입 하도록 user.module.ts 에 exports 설정을 추가함. \n> 📌 user/user.module.ts\n```ts\n// user/user.module.ts\nimport { Module } from \"@nestjs/common\";\nimport { UserController } from \"./user.controller\";\nimport { UserService } from \"./user.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./user.entity\";\n@Module({\n    imports : [TypeOrmModule.forFeature([User])],\n    controllers : [UserController],\n    providers : [UserService],\n    //UserService 를 외부로 노출해야함. \n    exports: [UserService]\n})\nexport class UserModule {}\n\n```\n\n\n## 10.4.2. 회원 가입 메서드 생성 \n### (1) UserService 클래스의 creatUser 사용 , 비밀번호 같은 정보 암호화\n> bcrypt  설치 \n```bash\nnpm install bcrypt\nnpm install -D @types/bcrypt \n```\n\n\n### (2) 서비스 -> 컨트롤러  코드 작성 \n> src/auth/auth.service.ts \n```TS\n//src/auth/auth.service.ts \n// ** HTTP , DTO, service import\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from 'src/user/user.dto';\nimport { UserService } from 'src/user/user.service';\n// ** 회원 정보 암호화 라이브러리 \nimport * as bcrypt from 'bcrypt'\n// \n// import { User } from 'src/user/user.schema';\nimport { User } from 'src/user/user.entity';\n\n@Injectable() // provider \nexport class AuthService {\n    constructor(private userService: UserService) {}\n\n    async register(userDto : CreateUserDto) {\n        // 1. 이미 가입된 유저 있는지 체크 \n        const user = await this.userService.getUser(userDto.email)\n        if (user) {\n            // 이미 가입된 유저 있을 경우 에러 발생 \n            throw new HttpException(\n                '해당 유저가 이미 있습니다. ',\n                HttpStatus.BAD_REQUEST\n            )\n        }\n        // password 암호화 \n        const encryptedPassword = await bcrypt.hash(userDto.password, 10)\n        // db 저장, 저장중 error 나면 서버 에러 발생 \n        try {\n            const user = await this.userService.createUser({\n                ...userDto,\n                password: encryptedPassword\n            })\n            // 회원 가입 후 반환하는 값에는 password 를 주지 않음. \n            user.password =undefined\n            return user\n        } catch (error) {\n            throw new HttpException('서버 에러 ', 500)\n        }\n    }\n}\n```\n\n### (3) 컨트롤러 생성(rough)\n>//auth.controller.ts\n```TS\nimport { Controller, Body, Get, Post } from '@nestjs/common';\nimport { CreateUserDto } from 'src/user/user.dto';\nimport { AuthService } from './auth.service';\nimport chalk from 'chalk';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService : AuthService) {}\n\n    // 등록 요청을 받으면 CreateUserDto 객체 \n    @Post('register')\n    async register(@Body() userDto: CreateUserDto) {\n        console.log(chalk.yellow(\" >> register start\"))\n        return await this.authService.register(userDto)\n    }\n}\n```\n- **🤔 @Body() userDto: CreateUserDto** 해석\n  - @Body 데코레이터는 요청 본문에서 데이터를 추출 함. \n  - 데코레이터로 추출한 것을 CreateUserDto 타입의 객체로 변환되어 userDto 변수에 할당함. \n\n\n## 10.4.3 SQLite 익스텐션으로 테이블 확인 \n\n> sqlite extension install > user-auth.sqlite  check\n<img src=\"https://blog.kakaocdn.net/dn/bRK3iR/btsLZvS2Kzf/WGLvJafbNqodY2xGDOFZSk/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/bRK3iR/btsLZvS2Kzf/WGLvJafbNqodY2xGDOFZSk/img.webp\" data-origin-width=\"2348\" data-origin-height=\"604\" data-is-animation=\"false\" width=\"755\" height=\"194\">\n\n\n\n# 10.5 쿠키를 사용한 인증 구현 \n\n1. AuthController 에 login 핸들러 메서드 구현\n>🤔핸들러란? : 핸들러는 특정 요청(Get,Put,Post,Delete)을 처리하는 역할을 하는 함수이다.\n\n2. Controller > AuthService 로 email, password 파라미터를 Dto 형태로 넘겨 주면 DB 에 해당 정보 유저가 있는지 유효성 검증을 하는 로직 구현.\n \n3. 유저 정보의 유효성 검증이 끝나면 응답 값에 쿠키 정보를 추가해 반환함. \n4. NestJS 에서 인증을 구현할때 보통 인증용 미들웨어인 가드를 함께 사용함. \n> ✅ 가드는 특정 상황(권한,롤,액세스컨트롤) 에서 받은 요청request 를 가드를 추가한 라우트 메서드에서 처리할지 말지를 결정하는 역할을 함. \n\n## 10.5.1 AuthService 에 이메일과 패스워드 검증 로직 만들기 \n### (1) 유저의 이메일과 패스워드 검증 로직 \n> 📌 auth/auth.service.ts\n```TS\n    // 회원 검증 \n    async validateUser(email: string, password: string) {\n        const user = await this.userService.getUser(email)\n        // 이메일로 유저 정보를 받음. \n        if (!user) { // 유저가 없는 경우 -> 검증 실패 \n            return null\n        }\n        const { password: hashedPassword, ...userInfo } =user\n\n        if (bcrypt.compareSync(password, hashedPassword)) {\n            // password 일치 \n            return userInfo\n        }\n        return null\n    }\n```\n\n### (2) validateUser() 메서드를 AuthController 에서 사용해 인증 결과를 쿠키에 추가 \n> 📌 auth/auth.controller.ts\n```TS\n    @Post('login')\n    async login(@Request() req, @Response() res) {\n        // validateUser\n        const userInfo = await this.authService.validateUser(\n            req.body.email,\n            req.body.password\n        )\n        // 유저 정보가 있으면, 쿠키 정보를 response 저장 \n        if (userInfo) {\n            res.cookie('login', JSON.stringify(userInfo), {\n                httpOnly: false, \n                maxAge: 1000 * 60 * 60 * 24 * 1 //7 day 단위는 밀리초 쿠키 지속 시간 \n            })\n        }\n        return res.send({ message: 'login success'})\n    } \n```\n- login()은 Request 와 Response를 모두 사용해야 하므로 @Body나 @Param 이 아닌 @Request 를 직접 사용함. Response 객체는 쿠키를 설정할때 사용함. \n- 앞서 만든 authService 의 validateUser를 호출해 패스워드를 제외한 유저 정보를 받음.  유저 정보가 있으면  res.cookie 를 사용해 쿠키를 설정함. \n- httpOnly 를 true 로 설정하여 브라우저에서 쿠키를 읽지 못하게 함. \n- 브라우저에서 쿠키를 읽을수 있으면 XSS(Cross Site Scripting) 등의 공격으로 쿠키 탈취 가 가능함. 명시적으로 false 를 줌. 원래 기본값도 false 임.\n-쿠키 정보를 브라우저에서 읽지 않아도 된다면 true 설정이 보안에 더 유리 \n\n### (3) login test \n\n```bash\n### USER login test\n curl -X POST \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n     \"email\":\"forre@grkcon.com\",\n     \"password\":\"grkcon2025!\"\n     }' \\\n     http://localhost:3000/auth/login\n```\n- curl 에서는 쿠키가 뜨지않고. test.http 파일에서 접근하면  연결자체가 안됨. \n- curl 명령에서 -v 설정을 추가하면 쿠키가 보임, -c cookie.txt 파일에 쿠키 저장 하고 -b cookie.txt 파일에서 쿠키읽어와서 접근하면 오류가 사라짐\n- type script 로 쿠키 확인할수있는 코드 \n> 📌 auth.test.ts\n```ts\nconst data = {\n    email: \"test1@grkcon.com\",\n    password: \"grkcon2025!\"\n  };\n  \n  fetch(\"http://localhost:3000/auth/login\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n  })\n  .then((response) => {\n       const setCookieHeaders = [];\n       const cookies = [];\n       \n       response.headers.forEach((value, key) => {\n           if (key.toLowerCase() === \"set-cookie\") {\n              setCookieHeaders.push(value);\n               const parsedCookies = value.split(';').reduce((acc, cookie) => {\n                  const [name, value] = cookie.trim().split('=');\n                  if (name && value) {\n                      acc[name] = value;\n                  }\n                  return acc;\n              }, {});\n              cookies.push(parsedCookies)\n           }\n       });\n    \n       console.log(\"Set-Cookie 헤더들:\", setCookieHeaders);\n       console.log(\"파싱 된 쿠키들:\", cookies)\n    return response.json();\n  })\n  .then((result) => console.log(\"응답 결과:\", result))\n  .catch((error) => console.error(\"오류 발생:\", error));\n```\n\n## 10.5.2 가드를 사용해 인증됬는지 검사\n- Nest.js 인증시 가드라는 미들웨어를 보편적으로 사용함. \n- 가드는 @Injectable() 데코가 붙어있고 CanActive 인터페이스를 구현한 클래스임. \n- @UseGuard 로 사용할수도 있음. \n- 클라이언트의 요청을 @Get, @Post 등이 붙어있는 핸들러 메서드에 넘기기 전에 인증에 관련된 처리를 할수 있음. \n- CanActivate 인터페이스를 구현하려면 canActivate() 메서드를 구현해야함. \n- CanActiavet 는 boolean or Promise<boolean>을 반환 true 인경우 핸들러 메서드 실행, false 이면 403 forbidden 에러를 반환 \n> NestJS 가드 인증 논리구조 \n<img src=\"https://blog.kakaocdn.net/dn/IqzdO/btsL0PyJxSx/3IFaRQsUi2JC1SLfYw61QK/img.jpg\" data-mce-src=\"https://blog.kakaocdn.net/dn/IqzdO/btsL0PyJxSx/3IFaRQsUi2JC1SLfYw61QK/img.jpg\" data-origin-width=\"906\" data-origin-height=\"730\" data-is-animation=\"false\" width=\"756\" height=\"609\">\n\n### (1) 서버측에서 http 헤더에 있는 쿠키를 읽는 코드 작성. \n- cookie-parser 패키지 설치 \n```bash\nnpm install cookie-parser\n```\n\n메인 에 코드 추가 \n> 📌 src/main.ts\n```TS\n// cookie \nimport * as cookieParser from 'cookie-parser'\n///( 생략 ..)\nasync function bootstrap() {\n  // Cookie parser 사용 \n  app.use(cookieParser())\n}\n```\n- 쿠키 파서는 request 객체에서 읽어오는데 사용하는 미들웨어임 \n- NestFactory.create로 만든 NestApplication 의 객체인 app에서 use() 함수를 사용해 미들웨어를 사용하도록 한줄만 추가하면 됨.\n\n\n### (3) auth.guard.ts 작성 \n- authService 의 validateUser 사용하여 가드 생성 \n- src/auth 아래에 auth.guard.ts 파일 생성 \n\n\n```TS\n/// src/auth/auth.guard.ts\n\nimport { CanActivate, ExecutionContext, Injectable} from '@nestjs/common'\n\nimport { AuthService } from './auth.service'\nimport { Observable } from 'rxjs'\n\n@Injectable()\nexport class LoginGuard implements CanActivate {\n\n    constructor(private authService: AuthService) {}\n    // CanActivate 인터페이스의 메서드 \n    async canActivate(context: any): Promise<boolean> {\n        // 컨텍스트에서 리퀘스트 정보를 가져옴\n        const request =  context.switchToHttp().getRequest()\n        // 쿠키가 있으면 인증된 것\n        if (request.cookies['login']) {\n            return true\n        }\n        // 쿠키가 없으면 request 의 body정보 확인 \n        if (!request.body.email || !request.body.password) {\n            return false \n        }\n\n        //기존의 authService.validateUser 를 사용하여 인증\n        const user = await this.authService.validateUser(\n            request.body.email,\n            request.body.password\n        )\n        // 유저 정보 없을시 false\n        if (!user) {\n            return false \n        }\n        // 유저정보가 있으면 request 에 user 정보 추가후 true \n        request.user = user\n        return true \n    }\n}\n```\n- @Injectable 이 있으므로 다른 클래스 주입가능 , CanActive 있으므로 가드 클래스임. \n- 인증시 authService 객체 주입, canActivate() 는 추상 메서드이므로 사용할 클래스에서 구현해야함. 반환 타입 은 async 이므로 Promise boolean 타입으로 사용 \n- true: 인증됨, false: 인증 안됨. \n\n\n### (4) auth.controller 에 useGuard 를 활용한 login2 함수 작성 \n> auth.controller.ts \n```TS\n   // 사용자 인증 \n    @UseGuards(LoginGuard)\n    @Post('login2')\n    async login2(@Request() req, @Response() res) {\n        // 쿠키정보는 없지만 request에 user 정보가 있다면 응답값에 쿠키 정보 추가 \n        if (!req.cookies['login'] && req.user) {\n            // 응답에 쿠키 정보 추가 \n            res.cookie('login', JSON.stringify(req.user), {\n                httpOnly: true,\n                maxAge: 1000 * 10 // test 용 \n            })\n        }\n        return res.send({message: 'login2 success'})\n\n    }\n    // 로그인을 한 때만 실행되는 메서드 \n    @UseGuards(LoginGuard)\n    @Get('test-guard')\n    testGuard() {\n        return '로그인 된 떄만 이 글이 보입니다. '\n    }\n}\n```\n\n### (5) 쿠키 로그인 인증 test \n> ✅ 기존에 create 로 생성된 아이디들은 테스트를 할수없음 auth/register 로 생성된 아이디들만 auth guard 에 인식이 되며 쿠키가 생성됨 \n\n> 로그인 > login2(by쿠키) Curl test\n```bash\n### USER login 가드 테스트 ( cookie 기록 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon2025!\"\n    }' \\\n    -c cookies.txt \\\n    http://localhost:3000/auth/login\n\n### USER login 가드 테스트 ( cookie 읽어서 login2 쿠키 확인 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon2025!\"\n    }' \\\n    -b cookies.txt \\\n    http://localhost:3000/auth/login2\n    \n### USER login  쿠키 인증 test\ncurl -X GET -b cookies.txt http://localhost:3000/auth/test-guard\n```\n# TEST RESULT\n<img src=\"https://blog.kakaocdn.net/dn/KYy7a/btsL3guLj2g/tcr5lb1Y9eAQ6sm2KdrZY0/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/KYy7a/btsL3guLj2g/tcr5lb1Y9eAQ6sm2KdrZY0/img.webp\" data-origin-width=\"1978\" data-origin-height=\"996\" data-is-animation=\"false\" width=\"757\" height=\"381\" data-mce-selected=\"1\">\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\n# 10.6 패스포트와 세션을 사용한 인증 구현 \n> 2025.1.27\n\n- 서버에서 인증을 하고 해당 정보를 서버의 특정공간에 저장.(세션 이용)\n- 쿠키는 세션을 찾는 정보만 저장(세션의 아이디값) 중요 정보는 세션에 모두 넣음. \n- 세션은 서버의 자원을 사용하여 서버에 부하를 주지만 위조,변조,탈취가 불가능하여 보안적임. \n- 가드하나로 로그인과 인증 모두 사용했지만 가드 두개와 인증 처리를 하기위한 파일을 여러개 만들것. \n- 로그인에 사용할 가드. \n- 인증 로직 구현 부분은 패스포트 라는 인증 로직을 쉽게 분리해서 개발하는 라이브러리 사용 \n- 패스포트 사용시 인증 로직은 스트래티지 파일을 생성해서 사용. \n- 패스포트는 인증 로직 수행을 담당하는 클래스를 의미함. \n- 다양한 인증을 위한 스트래티지 패키지를 같이 설치해 인증을 쉽게 구현가능. \n- 가드 안에 인증 로직을 두는것이 아닌 인증로직을 처리하는 별도의 스트래티지 파일 작성 \n- id, password 주었을때 올바른 정보인지 판단하는로직, 쿠키에서 값을 읽어 인증을 ㅟ한 올바른 데이터가 있는지 검증하는 로직 의미 \n- 세션에서 데이터를 읽어오고 저장하므로 세션에 데이터 저장하고 읽어올 세션 시리얼라이저(session serializer) 파일도 필요함. \n- 가드 패스포트 스트래티지, 세션 시리얼라이저가 서로 협력하여 사용자 신원을 확ㅇ니하고 이증 정보를 저장하고 읽어와서 다시 인증하는 작업을 함. 역할 분담이 잘되어 있어서 유지보수에 유리함. \n- \n<img src=\"https://blog.kakaocdn.net/dn/tcKVh/btsL2PYoHQ1/8CxqnWmk2T89kFRcdFhhyk/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/tcKVh/btsL2PYoHQ1/8CxqnWmk2T89kFRcdFhhyk/img.webp\" data-origin-width=\"1194\" data-origin-height=\"524\" data-is-animation=\"false\" width=\"748\" height=\"328\">\n\n\n## 10.6.1 라이브러리 설치 및 설정 \n### (1) passport 라이브러리 설치 \n> passport-local : username 과 password 로 인증전략 모듈 \n> 세션 저장에는 express-session 사용 \n> 개발할때 유용하므로 개발 환경 패키지를 설치하는 -D 옵션을 주어 설치함. \n```bash\nnpm i @nestjs/passport passport passport-local express-session\nnpm i -D @types/passport-local @types/express-session \n```\n\n### (2) 세션을 사용하려면 main.ts 파일에 설정 추가 \n\n> 📌 src/main.ts\n```ts\n// 로그인 인증을 위한 세션, passport 라이브러리 임포트 \nimport * as session from 'express-session'\nimport * as passport from 'passport'\n\n//(생략)\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  // session 설정 \n  app.use(\n    session({\n      secret: 'very-important-secret', // 세션 암호화 키 \n      resave: false, // 세션을 항상 저장할지 여부 \n      // 세션 저장되기 전 초기화 되지 않은 상태로 세션을 미리 저장 \n      saveUninitialized: false, \n      cookie: {maxAge: 3600000} // 쿠키 유효시간 1시간\n    })\n  )\n  // passport 시작, session  선언\n  app.use(passport.initialize())\n  app.use(passport.session())\n```\n\n## 10.6.2 로그인과 인증에 사용할 가드 구현 \n로그인에 사용할 가드와 로그인후 인증에 사용할 가드를 별개로 생성하여 사용 \nloginAuthGuard 는 HTTp 요청을 받은 email 과 password 정보로 유효한 user 정보가 있는지 확인해 유효할 경우 유저 정보를 세션에 저장. \nAuthenticatedGuard 는 HTTP 요청에 잇는 쿠키를 찾아 쿠키에 있는 정보로 세션을 학인해 로그인이 완료된 사용자인지 판별 \n- LoginAuthGuard 와 AuthenticatedGuard 가드를 auth.guard.ts 에 추가\n\n<img src=\"https://blog.kakaocdn.net/dn/bMUvMM/btsL19cgGma/NjDm7YBA6LgNpvIo2Tuty1/img.jpg\" data-mce-src=\"https://blog.kakaocdn.net/dn/bMUvMM/btsL19cgGma/NjDm7YBA6LgNpvIo2Tuty1/img.jpg\" data-origin-width=\"942\" data-origin-height=\"484\" data-is-animation=\"false\" width=\"757\" height=\"389\">\n\n```ts\n/// src/auth/auth.guard.ts\n\n// Guard 를 사용하기 위한 임포트 \nimport { CanActivate, ExecutionContext, Injectable, Request} from '@nestjs/common'\n\n// 패스포트 사용하는 AuthGuard 임포트 \nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service'\n\n@Injectable()\n// AuthGuard 상속 \nexport class LocalAuthGuard extends AuthGuard('local') {\n  async canActivate(context: any):   Promise<boolean>  {\n    const result = (await super.canActivate(context)) as boolean\n    // 로컬 스트래티지 실행 \n    const request = context.switchToHttp().getRequest()\n    // 세션 저장 \n    await super.logIn(request)\n    return result \n      \n  }\n}\n\n@Injectable() \nexport class AuthenticatedGuard implements CanActivate {\n  canActivate(context: ExecutionContext):  boolean{\n        const request = context.switchToHttp().getRequest()\n        // 세션에서 정보를 읽어서 인증 확인 \n        return request.isAuthenticated()\n  }\n}\n```\n- 패스 포트 인증에 가드를 사용할수 있도록 감싸둔 AuthGuard 를 제공하는 라이브러리 \n- 패스포트는 인증로직을 스트래티지 개념으로 구현. \n- 이외에 스트레티지로 passport-jwt 와 passport-google-oauth20 이 있음. \n- 가드를 사용하려면 canActivate를 구현 \n- AuthGuard 상속 하여 super.canActivate() 에 서 passport-local 로직을 구현할 메서드 실행함. \n- local.startagy.ts 파일이 localStrategy 클래스 생성한후 valdiate() 메서드 구현 \n- super.logIn()에서 로그인 처리, 세션저장함. 세션에서 꺼내오는 방법은 session.serializaer.ts 파일에서 작성 \n- AuthenticatedGuard 가 로그인 후 인증되었는지 확인할때 사용. \n- 세션에 덷이터를 저장하고 돌려주는 응답값에 connect.sid 라는 이름의 쿠키를 만듬. \n- 이후 요청에 해당 쿠키값을 같이 전송하면 세션에 있는 값을 읽어 인증 여부를 확인 할떄 사용함. \n\n\n## 10.6.3 세션에 정보를 저장하고 읽는 세션 시리얼라이저 구현 \n### (1) request.isAuthenticated() 함수가 세션에서 정보를 읽어옴. \n\n```ts\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportSerializer } from \"@nestjs/passport\";\n// userService 주입 -> 유저정보를 검증 \nimport { UserService } from \"src/user/user.service\";\n\n@Injectable()\nexport class SessionSerializer extends PassportSerializer {\n    constructor(private userService: UserService){\n        super();\n    }\n    // 세션에 유저의 이메일 정보 저장 \n    serializeUser(user: any, done: (err:Error, user:any) => void):any {\n        done(null,user.email) // 세션에 저장할 정보 \n    }\n    // 세션에서 정보를 꺼내올떄 사용 \n    async deserializeUser(\n        payload: any,\n        done: (err: Error, payload: any) => void,\n    ): Promise<any> {\n        const user = await this.userService.getUser(payload)\n        // 유저 정보가 없는경우 done()함수에 에러 전달\n        if(!user) {\n            done(new Error('No User'), null)\n            return \n        }\n        const { password, ...userInfo} = user\n        done(null,userInfo)\n    }\n}\n```\n1. SessionSerializer :  로그인 성공후 사용자정보를 세션에 저장. 이메일(최소한의 정보)만 추출하여 세션에 저장. 이후 요청에서 세션정보를 이용하여 사용자 정보를 복원함. \nserializeUser 함수가 이메일을 세션에 저장하는 작업 완료후 그결과를 Passport 에 알림. \nuser 정보는 LocalAuthGuard 의 canActive() 메서드 의 super.logIn(request)를 호출 할때 내부적으로 request에 있는 user 정보를 꺼내서 전달하면서 serializeUser 실행\n\n2. done(err:Error, user :any): Passport.js 에서 비동기 작업의 결과를 처리하기 위해 사용하는 콜백 , err 는 Error 타입의 객체임. 결과 void 이므로 done 은 어떤 값도 반환 하지 않음. \n   \n3. (user: any ..)\n    : user 는 매개변수 이름. 로그인전략( local,google,facebook) 성공시 전달해주는 사용자 정보를 의미함!! LocalAuthGuard 사용시 valildateUser 메소드에서 반환된 유저정보가 serializeUser 함수의 user인자로 전달됨. \n\n5. getPassportInstance() : 패스포트 인스턴스를 가져옴, 패스포트 인스턴스의 데이터가 필요한 경우 사용 \n\n6. deserializeUser() : 인증되었는지 세션에 있는 정보로 검증할때 \n payload(세션에서 꺼내온값.전달되는 데이터의 핵심 부분 ) :  deserializeUser 함수에서 세션에 저장된 사용자 식별 정보(이메일)를 전달 받아 해당 사용자의 정보를 조회하고 복원하는데 사용하는 값. \n\n<img src=\"https://blog.kakaocdn.net/dn/bChuC6/btsL2cs27U8/c8ErD5kTROSImCv9xBdDQ0/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/bChuC6/btsL2cs27U8/c8ErD5kTROSImCv9xBdDQ0/img.webp\" data-origin-width=\"744\" data-origin-height=\"468\" data-is-animation=\"false\" width=\"742\" height=\"467\">\n\n\n## 10.6.4 email,password 인증 로직이 있는 LocalStrategy 파일 작성 \n\n- 인증 방법이 다양함. 패스포트에서 strategy(인증전략) 이라는 별개의 패키지로 분리해 담음. \n- id, password 로 인증하는 기능은 passport-local 패키지에서 제공함. \n\n|인증방법|패키지|설명|\n|--|--|--|\n|Local|passport-local|유저명, 패스워드를 사용|\n|OAuth|passport-oauth|구글,페이스북 등 외부 서비스에서 인증|\n|SAML|passport-saml|SAML 신원제공사에서 인증, OneLogin, Okta|\n|JWT|passport-jwt|JSON web token 인증|\n|AWS Cognito|passport-cognito|AWS Cognito user pool 인증|\n|LDAP|passport-ldapauth|LDAP 디렉터리 사용 |\n\n\n### (1) email, password 인증 로직이 있는 localStrategy 파일 작성 \n\n>//auth/local.strategy.ts\n```ts\n//auth/local.strategy.ts\n\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    // 1. PassportStrategy 믹스 인 \n    constructor( private authService: AuthService) {\n        // 기본값이 username 이므로 email 로 변경함. \n        super({usernameField :'email'})\n    }\n    // 유저 정보의 유효성 검증 \n    async validate(email: string, password: string) : Promise<any> {\n        \n        const user = await this.authService.validateUser(email,password)\n        \n        if (!user) {\n            return null // null -> 404 에러 \n        }\n        return user  // user 정보 반환 \n    }\n}\n```\n- PassportStrategy(Strategy) : 믹스인 \n- 컴포는트를 재사용할 때 상속을 많이 사용하지만 해당 클래스의 모든것을 재사용해야하는 불편함. 클래스의 일부만 확장하고 싶을 때는 믹스인 을 사용 \n>🤔 믹스인(mixin) / 트레잇(trait)\n>클래스에 새로운 기능을 추가하기 위해, 필요한 메서드를 가지고 있는 작은 클래스들을 결합해 기능을 추가하는 방법 \n\n- local-strategy 에는 인증시 사용하는 필드명이 username, password 로 정해져있으므로 usernameField 이름을 email 로 바꾸어줌. \n- validate() 메서드에서는 전달한 email과 password 가 올바른지 검증함.(이미 있는 authSErvice 의 validateUser() 사용 )\n\n## 10.6.5 auth.module.ts 에 설정 추가 \n### 만들어둔 LocalStrategy, SessionSerializer 를 다른 클래스에서 사용하도록 프로바이더 등록, passportModule에 세션을 추가 등록 \n> // auth.module.ts\n```ts\n// Passport, serializer , local strategy 추가 \nimport { PassportModule } from '@nestjs/passport';\nimport { SessionSerializer } from './session.serializer';\nimport { LocalStrategy } from './local.strategy';\n\nconsole.log(chalk.red('AuthModule Start[[[인증]]]]'))\n@Module({\n  imports: [\n    UserModule,\n    PassportModule.register({session: true}),\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    SessionSerializer\n  ],\n  controllers: [AuthController]\n})\n```\n- PassportModule 의 기본설정은 세션 설정이 false 로 되어있어서 true 로 설정. \n- LocalStrategy ,SessionSerializer 프로바이더 등록 필요 다른데서 주입하지 않아도 프로바이더 등록안하면 클래스를 찾지 못해 에러남. \n\n\n## 10.6.6. 테스트 \n>  // auth.controller.ts \n```ts\n// 가드 사용 임포트 \nimport { AuthenticatedGuard, LocalAuthGuard, LoginGuard } from './auth.guard';\n\n    // Login 3. 가드, 세션, 쿠키 사용 \n    @UseGuards()\n    @Post('login3')\n    login3(@Request() req ) {\n        return req.user\n    }\n\n    @UseGuards(AuthenticatedGuard)\n    @Get('test-guard2')\n    testGuardWithSession(@Request() req){\n        return req.user\n    }\n}\n```\n\n```bash\n### USER login 가드 테스트 ( cookie 기록 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon2025!\"\n    }' \\\n    -c cookies.txt \\\n    http://localhost:3000/auth/login3\n```\n- 틀린 패스워드로 하면 401 에러가 난다. (auth.service validateUser() 동작 )\n- 인증이 성공하면 유저정보가 나온다. \n- 서버 재시작 하면 세션은 초기화 됨. \n\n## 10.6.7 로그인과 세션 저장까지 순서 \n\n<img src=\"https://blog.kakaocdn.net/dn/dTvf5x/btsL2AHflrI/SdIAQKyzihnS2cv1dreRsk/img.jpg\" data-mce-src=\"https://blog.kakaocdn.net/dn/dTvf5x/btsL2AHflrI/SdIAQKyzihnS2cv1dreRsk/img.jpg\" data-origin-width=\"958\" data-origin-height=\"556\" data-is-animation=\"false\" width=\"763\" height=\"443\">"
            ],
            "outputs": []
        },
        {
            "language": "powershell",
            "source": [
                "### USER login  쿠키 인증 test\ncurl -X GET -b cookies.txt http://localhost:3000/auth/test-guard2"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   108  100   108    0     0      0      0 --:--:-- --:--:-- --:--:--     0 0     0  19230      0 --:--:-- --:--:-- --:--:-- 21600",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"createdDt\":\"2025-01-25T06:51:03.000Z\",\"id\":6,\"email\":\"test1@grkcon.com\",\"username\":\"test1\",\"role\":\"admin\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER login 가드 테스트 ( cookie 기록 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon20225!\"\n    }' \\\n    -c cookies.txt \\\n    http://localhost:3000/auth/login3\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   142  100    73  100    69    956      0 --:--:-- --:--:-- --:--:--     0 904 --:--:-- --:--:-- --:--:--  1868",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"statusCode\":401,\"message\":\"비밀번호가 일치하지 않습니다.\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# ETL 을 위한 DB설계\n\nETL 을 활용한 데이터 마트의데이터는 데이터를 쉽게 시각화하게 도와줌. \n\n\npostgres 는 nosql 도 되고 sql 도 된다. 고급 sql 기능을 무료로 사용가능하다.\n\ntypeORM 과 postgres 를 연동하고 etl 이 가능하도록 세팅하자. \n\n```bash\nnpm install --save @nestjs/typeorm typeorm pg psql\n\n```\n> typeorm.config.ts \n```TS\nimport { TypeOrmModuelOptions } from @nestjs/typeorm\n\nexport const typeOrmConfig: TypeOrmModuleOptions = {\n    type : 'postgres',\n    host : localhost',\n    port : 5432,\n    username: 'postgres',\n    password: 'qwe123',\n    database: 'board-app',\n    entities: [__dirname _ '../../~ entity.ts],\n    synchronize: true\n}\n```\n> app.module.ts \n```TS\nimport {Module} from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs.typeorm'\nimport {typeOrmConfig } from './configs/typeorm.config'\n\n@Module ({\n    imports[TypeOrmModule.forRoot(typeOrmConfig), ]\n})\n```\n\n\n참고 \n1. [2025년에 따라할 수 있는 10가지 MongoDB ETL 도구](https://airbyte.com/top-etl-tools-for-sources/mongodb)\n\n2. [Node.js를 위한 최고의 5가지 ETL 도구 | 오픈 소스 Node.js ETL 도구](https://blog.panoply.io/5-top-level-etl-tools-for-node.js-and-2-paid-etls)\n\n3. [PostgreSQL의 차별화된 기능과 MySQL과의 차이](https://www.elancer.co.kr/blog/detail/737)\n\n4. [따라하면서 배우는 NestJS #4 - TypeORM, PostgreSQL](https://velog.io/@jinas1004/%EB%94%B0%EB%9D%BC%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-NestJS-4-TypeORM-PostgreSQL)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// auth/aut.test.ts\nconst data = {\n    email: \"test1@grkcon.com\",\n    password: \"grkcon2025!\"\n  };\n  \n  fetch(\"http://localhost:3000/auth/login\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n  })\n  .then((response) => {\n       const setCookieHeaders = [];\n       const cookies = [];\n       \n       response.headers.forEach((value, key) => {\n           if (key.toLowerCase() === \"set-cookie\") {\n              setCookieHeaders.push(value);\n               const parsedCookies = value.split(';').reduce((acc, cookie) => {\n                  const [name, value] = cookie.trim().split('=');\n                  if (name && value) {\n                      acc[name] = value;\n                  }\n                  return acc;\n              }, {});\n              cookies.push(parsedCookies)\n           }\n       });\n    \n       console.log(\"Set-Cookie 헤더들:\", setCookieHeaders);\n       console.log(\"파싱 된 쿠키들:\", cookies)\n    \n    \n    return response.json();\n  })\n  .then((result) => console.log(\"응답 결과:\", result))\n  .catch((error) => console.error(\"오류 발생:\", error));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Set-Cookie 헤더들: [",
                                "  'login=%7B%22createdDt%22%3A%222025-01-25T06%3A51%3A03.000Z%22%2C%22id%22%3A6%2C%22email%22%3A%22test1%40grkcon.com%22%2C%22username%22%3A%22test1%22%2C%22role%22%3A%22admin%22%7D; Max-Age=86400; Path=/; Expires=Sun, 26 Jan 2025 06:51:54 GMT'",
                                "]",
                                "응답 결과: { message: 'login success' }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER login 가드 테스트 ( cookie 기록 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon2025!\"\n    }' \\\n    -c cookies.txt \\\n    http://localhost:3000/auth/login\n\n    "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100    95  100    27  100    68    210    529 --:--:-- --:--:-- --:--:--     0 --:--:-- --:--:--   742",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"message\":\"login success\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER login 가드 테스트 ( cookie 읽어서 login2 쿠키 확인 )\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\":\"test1@grkcon.com\",\n    \"password\":\"grkcon2025!\"\n    }' \\\n    -b cookies.txt \\\n    http://localhost:3000/auth/login2"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100    96  100    28  100     0      0      0 --:--:-- --:--:-- --:--:--     0   68  14917  36228 --:--:-- --:--:-- --:--:-- 96000",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"message\":\"login2 success\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER login  쿠키 인증 test\ncurl -X GET -b cookies.txt http://localhost:3000/auth/test-guard"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100    46  100    46    0     0      0      0 --:--:-- --:--:-- --:--:--     0 26869      0 --:--:-- --:--:-- --:--:-- 46000",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "로그인 된 떄만 이 글이 보입니다. "
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "## AuthControll check \ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\" :\"test1\",\n    \"password\": \"grkcon2025!\",\n    \"email\":\"test1@grkcon.com\",\n    \"role\":\"admin\"\n    }' \\\n    http://localhost:3000/auth/register"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   217  100   108  100   109   1640   1655 --:--:-- --:--:-- --:--:--     0--:--:-- --:--:--  3338",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"username\":\"test1\",\"email\":\"test1@grkcon.com\",\"role\":\"admin\",\"id\":6,\"createdDt\":\"2025-01-25T06:51:03.000Z\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER login test\n curl -v -X POST \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n     \"email\":\"forre2@grkcon.com\",\n     \"password\":\"grkcon2025!\"\n     }' \\\n     -b cookies.txt \\\n     http://localhost:3000/auth/login"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "Note: Unnecessary use of -X or --request, POST is already inferred.",
                                "* Host localhost:3000 was resolved.",
                                "* IPv6: ::1",
                                "* IPv4: 127.0.0.1",
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying [::1]:3000...",
                                "* Connected to localhost (::1) port 3000",
                                "> POST /auth/login HTTP/1.1",
                                "> Host: localhost:3000",
                                "> User-Agent: curl/8.5.0",
                                "> Accept: */*",
                                "> Content-Type: application/json",
                                "> Content-Length: 72",
                                "> ",
                                "} [72 bytes data]",
                                "< HTTP/1.1 201 Created",
                                "< X-Powered-By: Express",
                                "< Content-Type: application/json; charset=utf-8",
                                "< Content-Length: 27",
                                "< ETag: W/\"1b-1kZjyyqCNo1Oj/t1Y5EmCqBR99s\"",
                                "< Date: Sat, 25 Jan 2025 06:28:16 GMT",
                                "< Connection: keep-alive",
                                "< Keep-Alive: timeout=5",
                                "< ",
                                "{ [27 bytes data]",
                                "100    99  100    27  100    72   4092  10914 --:--:-- --:--:-- --:--:-- 16500",
                                "* Connection #0 to host localhost left intact",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"message\":\"login success\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER create test\n curl -X POST \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\" :\"Forre2\",\n     \"password\": \"grkcon2025!\",\n     \"email\":\"forre2@grkcon.com\",\n     \"role\":\"admin\"\n     }' \\\n     http://localhost:3000/user/create"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   250  100   135  100   115  16720      0 --:--:-- --:--:-- --:--:--     014243 --:--:-- --:--:-- --:--:-- 31250",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"username\":\"Forre2\",\"password\":\"grkcon2025!\",\"email\":\"forre2@grkcon.com\",\"role\":\"admin\",\"id\":4,\"createdDt\":\"2025-01-25T06:18:31.000Z\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### User get test\ncurl -X GET http://localhost:3000/user/getUser/forre@grkcon.com\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   132  100   132    0     0  17722      0 --:--:-- --:--:-- --:--:--     0      0 --:--:-- --:--:-- --:--:-- 18857",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"createdDt\":\"2025-01-23T03:15:14.000Z\",\"id\":1,\"email\":\"forre@grkcon.com\",\"password\":\"grkcon2025!\",\"username\":\"Forre\",\"role\":\"user\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### Update User \ncurl -X PUT \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\" :\"Forre\",\n     \"password\": \"grkcon2025!\",\n     \"role\":\"user\"\n     }' \\\n     http://localhost:3000/user/update/forre@grkcon.com\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100    79    0     0  100    79      0      0 --:--:-- --:--:-- --:--:--     04638 --:--:-- --:--:-- --:--:--  4647",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "powershell",
            "source": [
                "### USER create test wrong input error \ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\" :\"test\",\n    \"password\": \"grkcon2025!\",\n    \"email\":\"test@email.com\",\n    \"role\":\"admin\"\n    }' \\\n    http://localhost:3000/user/create"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
                                "                                 Dload  Upload   Total   Spent    Left  Speed",
                                "100   236    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   130  100   106  11185   9120 --:--:-- --:--:-- --:--:-- 21454",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"username\":\"test\",\"password\":\"grkcon2025!\",\"email\":\"test@email.com\",\"role\":\"admin\",\"id\":5,\"createdDt\":\"2025-01-25T06:50:35.000Z\"}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# 11. OAuth 를 사용한 구글 로그인 인증 \n\n- OAuth(open Authorization ) 개방형 인가 표준 \n- OAuth 는 인증이 아니라 인가의 관점에서 보아야함. \n- 소셜 로그인 후 팝업이 뜨면서 권한을 요청하는 화면 \n- OAuth 1.0, 2.0, 2.1 중 2.0 을 가장 많이 사용 \n\n인증: 리소스에 접근 자격이 있는지 검증하는 과정 ,OAuth 에서 리소스는 보호된 정보를 의미함. \n인가 : 자원에 접근할 권한을 부여하는 과정. 인가가 완료되면 리소스의 접근 권한 정보가 있는 엑세스 토큰을 클라이언트에게 보내줌. \n엑세스 토큰 : 리소스 서버에서 리소스 소유자의 보호된 정보를 획득 할떄 사용하는 만료기간이 있는 토큰 \n리프레시 토큰 : 엑세스 토큰이 만료되었을떄 갱신하는 용도로 사용하는 토큰. 액세스 토큰보다 만료기간을 길게 가져감 \n리소스 소유자 : 리소스는 사용자의 보호된 정보를 말하며 이런 정보에 접근하도록 자격을 부여하는 사람. OAuth 에서는 사용자가 리소스 소유자다 라고 생각하면 됨. \n클라이언트 : 리소스를 사용하려고 접근을 요청하는 애플리케이션 \n리소스 서버  : 사용자의 보호된 자원을 가지고 있는 서버 \n인가 서버 : 인증 인가를 수행 하는 서버로 클라이언트의 접근 자격을 확인하고 액세스 토큰을 발급해 권한을 부여함. \n\n- 인가 서버와 리소스 서버의 조합 을 OAuth2 프로바이더라고 부름. \n\n## 11.1.1 OAuth 프로토콜 흐름 \n<img src=\"https://blog.kakaocdn.net/dn/cNHy3B/btsL2a99wzV/81K65QqS0Hy4pxHlAkwlP0/img.jpg\" data-mce-src=\"https://blog.kakaocdn.net/dn/cNHy3B/btsL2a99wzV/81K65QqS0Hy4pxHlAkwlP0/img.jpg\" data-origin-width=\"788\" data-origin-height=\"552\" data-is-animation=\"false\" width=\"757\" height=\"530\">\n\n- 인증코드(Authorization code) 사용 \n- 암묵적 방법 (Implicit)\n- 리소스 소유자의 암호 자격증명 (Resource Owner Password Credential)\n- 클라이언트 자격증명 (Client Credentials)\n\n## 11.1.2  액세스 토큰 재발 행 흐름. \n액세스 토큰 만료시 리프레시 토큰으로 재발헹 \n\n\n\n# 11.2 구글 OAuth 를 사용하기 위한 준비 \n\n## 11.2.1 구글 클라우드 프로젝트 생성\n\n### (1) 프로젝트 생성 https://console.cloud.google.com 접속  >  프로젝트 선택 > 새프로젝트 > 프로젝트 이름 grk-research-oauth \n\n<img src=\"https://blog.kakaocdn.net/dn/IsB3s/btsL185L9pa/6Wdnbk0opn34Zo1DAfhdhk/img.webp\" data-is-animation=\"false\" data-origin-width=\"1708\" data-origin-height=\"740\" data-filename=\"Screenshot 2025-01-27 at 4.52.51 PM.webp\" width=\"786\" height=\"341\">\n\n## 11.2.2 Oauth 동의 화면 생성 \n### (1) 생성 프로젝트 선택 > 왼쪽 탭 [api 및 서비스 ] 클릭 > [Oath 동의 화면 클릭 ]\n<img src=\"https://blog.kakaocdn.net/dn/dqX54G/btsL3AmufAj/sST7Dgt6JmPlrKwMNlKlTK/img.webp\" data-is-animation=\"false\" data-origin-width=\"1698\" data-origin-height=\"1348\" data-filename=\"Screenshot 2025-01-27 at 5.01.18 PM.webp\" width=\"777\" height=\"617\">\n\n앱정보 > 앱이름 'grk-research-platform' > 사용자 지원 이메일 forre@grkcon.com > 앱로고 즉석 제작 >  앱 도메인 애플리케이션 홈페이지 http://forrestest.site > \n<img src=\"https://blog.kakaocdn.net/dn/bNkjEK/btsL1A9ezyy/PoSAshsW1gDywltZR9FKdK/img.webp\" data-is-animation=\"false\" data-origin-width=\"1666\" data-origin-height=\"876\" data-filename=\"Screenshot 2025-01-27 at 6.33.07 PM.webp\" width=\"755\" height=\"397\">\n\n-> 이설정은 나중에 grkconplatform 사이트가 정해지면 바꾸어야한다.  > 개발자 연락처 정보 입력 > 저장후 계속 버튼 클릭 > 테스트사용자 -저장후 계속 > 대시보드 돌아가기 \n\n## 11.2.3 OAuth 클라이언트의 id와 비밀번호 생성 \n\n###  (1) 사용자 인증 정보 > 사용자 인증정보 만들기 > Oauth 클라이언트 id 클릭 > 인증 정보 설정 화면 이동 \n<img src=\"https://blog.kakaocdn.net/dn/674Kl/btsL3OZfJ5y/TzKmj6a3wRbIrKn4tyllFk/img.webp\" data-is-animation=\"false\" data-origin-width=\"1108\" data-origin-height=\"1336\" data-filename=\"Screenshot 2025-01-27 at 6.36.00 PM.webp\" width=\"744\" height=\"897\">\n\n### (2) 클라이언트 생성, 도메인 추가 후 클라이언트 아이디, 비밀번호 저장..매우 보안중요!\n<img src=\"https://blog.kakaocdn.net/dn/PnRmR/btsL1HgwTyH/O10TBaD8bd7ffCCM7lkd60/img.webp\" data-is-animation=\"false\" data-origin-width=\"1042\" data-origin-height=\"1082\" data-filename=\"Screenshot 2025-01-27 at 6.36.21 PM.webp\" width=\"742\" height=\"770\">\n\n# 11.3 구글 OAuth 구현 순서 \n\n- 구글 OAuth  이메일과 프로필 정보를 구글 Oauth 스트레티지 파일의 validate() 메서드에서 콜백으로 받음. \n- 이때 넘어오는 데이터는 액세스 토큰, 리프래시토큰, 프로필 정보 .\n- 프로필에는 식별자로 사용되는 ID가 있으며 providerId 라고 함, name 객체 도 있음. \n\n\n# 11.4 NestJS 환경 설정 파일 추가 \n\n```bash\nnpm i @nesetjs/config\n```\n\n\n### (2) .env 구글 oauth 용 파일 생성, 및 설정 \n\n현재 load 옵션을 사용해 커스텀 설정 파일 추가 중이므로 .env 파일이 아니라 \ndev.ts 파일에서 설정 \n- .gitignore 에 dev.ts 파일 추가 \n\n## 11.5 구글 OAuth 스트레티지 생성 \n### (1) 스트레티지 지원 패키지 설치 \n```bash\nnpm i passport-google-oauth20\nnpm i -D @types/passport-google-oauth20\n```\n### (2) google.strategy.ts 생성 \n\n```ts\n// src/auth/google.strategy.ts\n\nimport { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Profile, Strategy } from \"passport-google-oauth20\";\nimport { User } from \"src/user/user.entity\";\nimport { UserService } from \"src/user/user.service\";\n\n// Google id, secret은 Config file 에 있음 \nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\n// Passport Strategy 상속 \nexport class GoogleStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private userService: UserService,\n        private configService: ConfigService\n    ) {\n        super({\n            clientID : configService.get<string>('GOOGLE_CLIENT_ID'),\n            clientSecret : configService.get<string>('GOOGLE_CLIENT_SECRET'),\n            callbackURL : 'http://localhost:3000/auth/google',\n            scope : ['email', 'profile']\n        })\n    }\n    async validate(accessToken: string, refreshToken: string, profile: Profile) {\n\n        const {id, name, emails} =profile\n        console.log(accessToken)\n        console.log(refreshToken)\n        const providerId = id\n        const email = emails[0].value\n        console.log(providerId, email, name.familyName, name.givenName)\n        return profile\n    }\n\n}\n```\n- Strategy 클래스는 인증시 에 사용하는 로직을 추가하는 메서드 \n- PassportStrategy 메서드 validate() 를 추가할 목적으로 사용 \n- PassportStrategy 는 NestJS 에서 패스포트를 ㅏ용하는 방법을 일원화 하는데 사용하는 믹스 인 임. \n- 인증의 유효성 검증시 validate() 메서드를 사용할 것이라는 것을 쉽게 유추 가능. \n- 생성자에 userService 생성하지만 현재는 사용 안하마. \n- validate : 구글 OAuth 인증 후 콜백 url 을 실행하기 전에 유효성 검증함. 콜백의 매개 변수로 access_token, refresh_token, profile 을 받음. access_token 과 refresh_token 은 딱히 필요는 없음. 최초 인증시 유저데이터를데이터베이스에 저장하기 때문. \n- profile: passport-google-oauth20 의 Profile 타입 인스턴스임. id, name, emails 속성을 가짐. \n- id 는 프로바이더 ID 로 해당 프로바이더에서 유일한값, \n### (3) Strategy 는 프로바이더이므로 등록, auth.module \n\n> auth.moduel.ts\n``` ts\n// Google strategy 등록 \nimport { GoogleStrategy } from './google.strategy';\n\n  providers: [\n    AuthService,\n    LocalStrategy,\n    SessionSerializer,\n    GoogleStrategy\n\n  ],\n```\n\n# 11.6 GoogleAuthGuard 생성 \n### (1) auth.guard.ts 에 GoogleAuthGuard 클래스 추가 \n\n> auth.guard.ts\n```ts\n@Injectable()\n// Google stratagey Guard 상속 \nexport class GoogleAuthGuard extends AuthGuard('google'){\n  async canActivate(context: ExecutionContext):  Promise<boolean>  {\n    const result = (await super.canActivate(context)) as boolean\n\n    // context 에서 request 를 추출 함. \n    const request = context.switchToHttp().getRequest()\n    return result\n  }\n}\n```\n- passport 의 Strategy 를 쉽게 사용하기 위한 클래스로 생성자의 매개변수에 사용할 스트래티지 문자열로 넣으면 됨. \n- super.canActivate() 메서드에서 GoogleStrategy 의 validate() 를 사용함. \n- nestJS 에서는 context 에서 리퀘스트 객체를 꺼낼수 있음. \n\n<img src=\"https://blog.kakaocdn.net/dn/o9eZT/btsL1hWoEjp/4e8iVDN2cUrYNaHvVDnsgK/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/o9eZT/btsL1hWoEjp/4e8iVDN2cUrYNaHvVDnsgK/img.webp\" data-origin-width=\"1122\" data-origin-height=\"652\" data-is-animation=\"false\" width=\"757\" height=\"440\">\n\n# 11.7 컨트롤러에 핸들러 메서드 추가 \n### (1) 스트레티지. 가드 생성 후 -> 유저 요청 받을 컨틀롤러 안에 핸들러 매서드 작성 \n> auth.controller.ts\n```ts\n    // Google login \n    @Get('to-google')\n    @UseGuards(GoogleAuthGuard)\n    async googleAuth(@Request() req) {}\n\n    @Get('google')\n    @UseGuards(GoogleAuthGuard)\n    async googleAuthRedirect(@Request() req , @Response() res) {\n        const { user } = req\n        return res.send(user)\n    }\n```\n- GoogleAuthGuard 임포트 googleAuth() , googleAuthRedirect() 에서 사용 \n  \n\n## 11.7.1 테스트 \nhttp://localhost:3000/auth/to-google > 됨..\n\n\n# 11.8 User 엔티티 파일 수정 \n### (1) user.entity 에서 password 가 없을때에도 데이터가 저장하는 기능과 구글 인증시 식별자인 providerID 추가 \n\n> user.entity.ts\n```ts\n    @Column( {nullable: true}) // google 인증시 패스워드에 빈값 허용 \n    password: string\n\n   // provider ID : 구글 로그인이 아닌경우 빈값  \n    @Column({ nullable : true})\n    providerId : string\n}\n```\n\n# 11.9 UserService 에 구글 유저 검색 및 저장 메서드 추가. \n- 구글 인증 정보를 기반으로 회원 가입을 시켜주는 매서드 추가 \n- 이미 회원 정보가 잇다면 회원정보를 반환하는 메서드 필요 \n- 구글은 providerId 로 찾지만 우리는 이메일이 회원을 구분하는 단위 임. \n- 이메일로 기존 가입 여부를 확인해 가입되어있으면 유저정보 반환, 아니면 회원정보를 유저 테이블에 저장하는 코드 작성 \n\n> user.service.ts\n```ts\n    // Google 접속 시 유저 검색 및 회원 가입 \n    async findByEmailOrSave(email, username, providerId): Promise<User> {\n        const foundUser = await this.getUser(email)\n        if (foundUser) {\n            return foundUser\n        }\n        // 기존 회원이 아닌경우 db 저장 \n        const newUser = await this.userRepository.save({\n            email,\n            username,\n            providerId\n        })\n        return newUser\n    }\n```\n\n# 11.10 GoogleStrategy 에 구글 유저 저장하는 메서드 적용 \n### (1) GoogleStrategy 의 validate() 메서드에서 구글 유저 정보가 있다면 정보를 데이터베이스에서 가져오고 없다면 저장 필요 findByEmailOrSave 메서드를 GoogleStrategy에 적용 , validate() 메서드에서 profile 정보의 id, name, email 을 db 에 저장하도록 User 엔터티에 맞춰 넘겨줌 . \n\n> google.strategy.ts\n```ts\n // Google 용 validate\n    async validate(accessToken: string, refreshToken: string, profile: Profile) {\n\n        const {id, name, emails} =profile\n        console.log(accessToken)\n        console.log(refreshToken)\n        const providerId = id\n        const email = emails[0].value\n        console.log(providerId, email, name.familyName, name.givenName)\n\n        // db 용 User entity 포맷 <- userService \n        const user : User =await this.userService.findByEmailOrSave(\n            email,\n            name.familyName + name.givenName,\n            providerId\n        )\n        return user\n    }\n```\n\n# 11.11 GoogleAuthGuard에서 세션 사용하도록 변경 \n### (1) HTTP 요청시마다 구글 OAuth 통해인증하는게 아니라 쿠키, 세션 사용하여 저장된 데이터로 인증하도록 코드 변경 \n\n```ts\n@Injectable()\n// Google stratagey Guard 상속 \nexport class GoogleAuthGuard extends AuthGuard('google'){\n  async canActivate(context: ExecutionContext):  Promise<boolean>  {\n    const result = (await super.canActivate(context)) as boolean\n\n    // context 에서 request 를 추출 함. \n    const request = context.switchToHttp().getRequest()\n    \n    // 세션 사용하여 인증 유지 \n    await super.logIn(request)\n    return result\n      \n  }\n```\n\nhttp://localhost:3000/auth/to-google\n\n<img src=\"https://blog.kakaocdn.net/dn/cQdOfW/btsL2dMtoBO/niSDurrAfckKSaOYskKygK/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/cQdOfW/btsL2dMtoBO/niSDurrAfckKSaOYskKygK/img.webp\" data-origin-width=\"1198\" data-origin-height=\"912\" data-is-animation=\"false\" width=\"754\" height=\"574\">\n\n<img src=\"https://blog.kakaocdn.net/dn/dQFV1J/btsL1qszdPj/PkX2Bz4tJ1Xf2E9pGy7kuk/img.webp\" data-mce-src=\"https://blog.kakaocdn.net/dn/dQFV1J/btsL1qszdPj/PkX2Bz4tJ1Xf2E9pGy7kuk/img.webp\" data-origin-width=\"948\" data-origin-height=\"566\" data-is-animation=\"false\" width=\"759\" height=\"453\">\n\n<img src=\"https://blog.kakaocdn.net/dn/zkMr2/btsL2l42B4i/FgMZ7eAw2eLkirUY9LUAkK/img.gif\" data-is-animation=\"true\" data-origin-width=\"852\" data-origin-height=\"828\" data-filename=\"grklogin-google.gif\" width=\"746\" height=\"725\">\n\n"
            ],
            "outputs": []
        }
    ]
}